load("@bazel_tools//tools/build_defs/pkg:pkg.bzl", "pkg_tar")
#load("@build_bazel_rules_typescript//:defs.bzl", "ts_library", "ts_web_test")
load("@npm//@bazel/typescript:index.bzl", "ts_library")
load("@npm//@bazel/rollup:index.bzl", "rollup_bundle")
load("@npm//@bazel/jasmine:index.bzl", "jasmine_node_test")
load(":execute.bzl", "concat")

package(default_visibility = ["//:__subpackages__"])


# Building the distribution.

# Install the extension to ~/.local/share/gnome-shell/extensions
sh_binary(
    name = "install-extension",
    srcs = ["install-extension.sh"],
    data = [":dist.tar.gz"],
)

sh_binary(
    name = "concat",
    srcs = ["concat.sh"],
)

# Output a dist.tar.gz folder to bazel-bin for distribution.
pkg_tar(
    name = "dist",
    srcs = [":dist_files"],
    extension = "tar.gz",
    mode = "0664",
    strip_prefix = ".",
)

filegroup(
    name = "dist_files",
    srcs = [
        "extension.js",
        "metadata.json",
        "prefs.js",
        "layouts-default.json",
        "//schemas:gschemas.compiled",
        "//schemas:org.gnome.shell.extensions.gsnap.gschema.xml",
        "stylesheet.css",
        "LICENSE"
    ] + glob([
        "images/*",
    ]),
)

exports_files([
    "tsconfig.json",
    "tsconfig-app.json",
    "tsconfig-tools.json",
])

# NOTE: this will move to node_modules/BUILD in a later release
filegroup(
    name = "node_modules",
    srcs = glob([
        "node_modules/**/*.js",
        "node_modules/**/*.d.ts",
        "node_modules/**/*.json",
    ]),
)

ts_library(
    name = "app_lib",
    srcs = ["app.ts"],
    tsconfig = "//:tsconfig-app.json",
    deps = [
        ":gnometypes_lib",
        ":hotkeys_lib",
        ":logging_lib",
        ":settings_data_lib",
        ":shellversion_lib",
        ":snaptoneighbors_lib",
        ":editor_lib",
        ":tilespec_lib",
        ":settings_lib",
        ":monitors_lib",
        ":layouts_lib",
        ":layouticon_lib",
    ],
)
ts_library(
    name = "editor_lib",
    srcs = ["editor.ts"],
    tsconfig = "//:tsconfig-app.json",
    deps = [
            ":gnometypes_lib",
            ":hotkeys_lib",
            ":logging_lib",
            ":settings_data_lib",
            ":shellversion_lib",
            ":snaptoneighbors_lib",
            ":tilespec_lib",
            ":monitors_lib",
        ],
)
ts_library(
    name = "gnometypes_lib",
    srcs = ["gnometypes.ts"],
    tsconfig = "//:tsconfig-app.json",
    deps = [
    ],
)

ts_library(
    name = "hotkeys_lib",
    srcs = ["hotkeys.ts"],
    tsconfig = "//:tsconfig-app.json",
    deps = [
        ":logging_lib",
        ":settings_data_lib",
    ],
)

ts_library(
    name = "logging_lib",
    srcs = ["logging.ts"],
    tsconfig = "//:tsconfig-app.json",
    deps = [
    ],
)

ts_library(
    name = "settings_data_lib",
    srcs = ["settings_data.ts"],
    tsconfig = "//:tsconfig-app.json",
    deps = [],
)


ts_library(
    name = "shellversion_lib",
    srcs = ["shellversion.ts"],
    tsconfig = "//:tsconfig-app.json",
    deps = [
        ":logging_lib",
    ],
)

ts_library(
    name = "snaptoneighbors_lib",
    srcs = ["snaptoneighbors.ts"],
    tsconfig = "//:tsconfig-app.json",
    deps = [
        ":logging_lib",
        ":gnometypes_lib",
    ],
)


ts_library(
    name = "tilespec_lib",
    srcs = ["tilespec.ts"],
    tsconfig = "//:tsconfig.json",
)

ts_library(
    name = "entry_lib",
    srcs = ["entry.ts"],
    tsconfig = "//:tsconfig-app.json",
    deps = [":app_lib"],
)

ts_library(
    name = "tests",
    testonly = 1,
    srcs = [
        "shellversion.spec.ts",
        "tilespec.spec.ts",
    ],
    deps = [
        ":shellversion_lib",
        ":tilespec_lib",
        "@npm//@types/chai",
        "@npm//@types/jasmine",
        "@npm//chai",
        "@npm//jasmine",
    ],
)

ts_library(
    name = "monitors_lib",
    srcs = ["monitors.ts"],
    tsconfig = "//:tsconfig.json",
    deps = [
        ":gnometypes_lib",
        ":settings_lib",
        ":tilespec_lib",
        ":logging_lib"
    ]
)

ts_library(
    name = "settings_lib",
    srcs = ["settings.ts"],
    tsconfig = "//:tsconfig.json",
        deps = [
        ":logging_lib",
        ":settings_data_lib",
        ":tilespec_lib",
    ]
)

ts_library(
    name = "layouts_lib",
    srcs = ["layouts.ts"],
    tsconfig = "//:tsconfig-app.json",
    deps = [
    ],
)

ts_library(
    name = "layouticon_lib",
    srcs = ["layouticon.ts"],
    tsconfig = "//:tsconfig-app.json",
    deps = [
        ":layouts_lib",
    ],
)

jasmine_node_test(
    name = "testing",
    deps = [
        ":tests",
    ],
)

rollup_bundle(
    name = "bundle",
    entry_point = "entry.ts",
    deps = [":entry_lib"],
)

concat(
    name = "extension",
    srcs = [
        # Order matters here. Setup.js must come first.
        "setup.js",
        "polyfill.js",
        "bundle.js",
    ],
    out = "extension.js",
)
